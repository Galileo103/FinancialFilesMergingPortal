#include<iostream>
#include<stdio.h>
#include<stdlib.h>     /* atoi */
#include<iomanip>
#include<algorithm>
#include<cmath>
#include<math.h>
#include<limits>
#include<limits.h>
#include<utility>
#include<string>
#include<string.h>
#include<cstring>
#include<vector>
#include<set>
#include<queue>
#include<map>
#include<list>
#include<stack>
#include<bitset>
#include <stdio.h>
#include <stdlib.h>
#include <bitset>

/*for(int i = 0; i < ; i++)*/
#define _CRT_SECURE_NO_DEPRECATE
typedef unsigned long long ll;
const double eps = 1e-9;
using namespace std;
void init()
{
  	ios::sync_with_stdio(false);
	ios_base::sync_with_stdio(false);
	cin.tie(0), cout.tie(0);
}

bool cmp(string y, string x)
{
    if(y.size() == x.size())
        return y < x;
    return y.size() < x.size();
}
bool isPrime(int x)
{
    if(x==1)
        return 0;
    for(int i = 2; i*i <= x; i++)
       if(x%i == 0)
            return 0;
    return 1;
}
int gcd(int a, int b)
{
    return b == 0 ? a : gcd(b, a%b);
}

////////////////////////////
/********** Merge Function **********/
void merge(int *a, int *b, int l, int m, int r) {

	int h, i, j, k;
	h = l;
	i = l;
	j = m + 1;

	while ((h <= m) && (j <= r)) {

		if (a[h] <= a[j]) {

			b[i] = a[h];
			h++;

		}

		else {

			b[i] = a[j];
			j++;

		}

		i++;

	}

	if (m < h) {

		for (k = j; k <= r; k++) {

			b[i] = a[k];
			i++;

		}

	}

	else {

		for (k = h; k <= m; k++) {

			b[i] = a[k];
			i++;

		}

	}

	for (k = l; k <= r; k++) {

		a[k] = b[k];

	}

}

/********** Recursive Merge Function **********/
void mergeSort(int *a, int *b, int l, int r) {

	int m;

	if (l < r) {

		m = (l + r) / 2;

		mergeSort(a, b, l, m);
		mergeSort(a, b, (m + 1), r);
		merge(a, b, l, m, r);

	}

}

int main()
{
    init();
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int N, arr[13], print = 0;
    while(cin >> N && N)
    {
        for(int i = 0; i < N; i++)
            cin >>arr[i];
        if(print++)
            cout << endl;
        for(int a = 0; a < N-5; a++)
            for(int b = a + 1; b < N-4; b++)
                for(int c = b + 1; c < N-3; c++)
                    for(int d = c + 1; d < N-2; d++)
                        for(int e = d + 1; e < N-1; e++)
                            for(int f = e + 1; f < N; f++)
                                cout << arr[a] << " " << arr[b] << " " << arr[c] << " " << arr[d] << " " << arr[e] << " " << arr[f] << endl;
    }

	return 0;


}

